const { QueryType } = require('discord-player');
const { ApplicationCommandOptionType } = require('discord.js');
module.exports = {
    name: 'play',
    description: "–∏–≥—Ä–∞—Ç—å –º—É–∑—ã–∫—É!",
    voiceChannel: true,
    options: [
        {
            name: 'song',
            description: '–ø–µ—Å–Ω—è –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–ª—É—à–∞—Ç—å',
            type: ApplicationCommandOptionType.String,
            required: true,
        }
    ],

    async execute({ inter }) {
	await inter.deferReply();
        const song = inter.options.getString('song');
        const res = await player.search(song, {
            requestedBy: inter.member,
            searchEngine: QueryType.AUTO
        });

        if (!res || !res.tracks.length) return inter.editReply({ content: `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ${inter.member}... –ø–æ–ø—Ä–æ–±—É–µ—à—å –µ—â–µ —Ä–∞–∑ ? ‚ùå`, ephemeral: true });

        const queue = await player.createQueue(inter.guild, {
            metadata: inter.channel,
            spotifyBridge: client.config.opt.spotifyBridge,
            initialVolume: client.config.opt.defaultvolume,
            leaveOnEnd: client.config.opt.leaveOnEnd
        });

        try {
            if (!queue.connection) await queue.connect(inter.member.voice.channel);
        } catch {
            await player.deleteQueue(inter.guildId);
            return inter.editReply({ content: `–Ø –Ω–µ –º–æ–≥—É –∑–∞–π—Ç–∏ –∫ —Ç–µ–±–µ ${inter.member}... try again ? ‚ùå`, ephemeral: true});
        }

       await inter.editReply({ content:`–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–≤–æ–µ–≥–æ ${res.playlist ? 'playlist' : 'track'}... üéß`});

        res.playlist ? queue.addTracks(res.tracks) : queue.addTrack(res.tracks[0]);

        if (!queue.playing) await queue.play();
    },
};
