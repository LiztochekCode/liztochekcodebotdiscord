const { ApplicationCommandOptionType, EmbedBuilder } = require('discord.js');
const { QueryType } = require('discord-player');

module.exports = {
    name: '–ø–æ–∏—Å–∫',
    description: '–∏—Å–∫–∞—Ç—å —Ç—Ä–µ–∫',
    voiceChannel: true,
    options: [
        {
            name: '–ø–µ—Å–Ω—è',
            description: '–ø–µ—Å–Ω—è –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–ª—É—à–∞—Ç—å',
            type: ApplicationCommandOptionType.String,
            required: true,
        }
    ],

    async execute({ client, inter }) {
        const song = inter.options.getString('song');

        const res = await player.search(song, {
            requestedBy: inter.member,
            searchEngine: QueryType.AUTO
        });

        if (!res || !res.tracks.length) return inter.reply({ content: `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ${inter.member}... –ø–æ–ø—Ä–æ–±—É–µ—à—å –µ—â–µ —Ä–∞–∑ ? ‚ùå`, ephemeral: true });

        const queue = await player.createQueue(inter.guild, {
            metadata: inter.channel,
            leaveOnEnd: client.config.opt.leaveOnEnd,
        });
        const maxTracks = res.tracks.slice(0, 10);

        const embed = new EmbedBuilder()
        .setColor('#ff0000')
        .setAuthor({ name: `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è ${song}`, iconURL: client.user.displayAvatarURL({ size: 1024, dynamic: true })})
        .setDescription(`${maxTracks.map((track, i) => `**${i + 1}**. ${track.title} | ${track.author}`).join('\n')}\n\nSelect choice between **1** and **${maxTracks.length}** or **cancel** ‚¨áÔ∏è`)
        .setTimestamp()
        .setFooter({ text: 'LiztochekCode üíó', iconURL: inter.member.avatarURL({ dynamic: true })})

        inter.reply({ embeds: [embed] });

        const collector = inter.channel.createMessageCollector({
            time: 15000,
            max: 1,
            errors: ['time'],
            filter: m => m.author.id === inter.member.id
        });

        collector.on('collect', async (query) => {
            if (query.content.toLowerCase() === 'cancel') return inter.followUp({ content: `Search cancelled ‚úÖ`, ephemeral: true }), collector.stop();

            const value = parseInt(query);
            if (!value || value <= 0 || value > maxTracks.length) return inter.followUp({ content: `Invalid response, try a value between **1** and **${maxTracks.length}** or **cancel**... try again ? ‚ùå`, ephemeral: true });

            collector.stop();

            try {
                if (!queue.connection) await queue.connect(inter.member.voice.channel);
            } catch {
                await player.deleteQueue(inter.guildId);
                return inter.followUp({ content: `–Ø –Ω–µ –º–æ–≥—É –∑–∞–π—Ç–∏ –∫ —Ç–µ–±–µ ${inter.member}... –ø–æ–ø—Ä–æ–±—É–µ—à—å –µ—â–µ —Ä–∞–∑ ? ‚ùå`, ephemeral: true });
            }

            await inter.followUp(`–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–≤–æ–µ–≥–æ –ø–æ–∏—Å–∫–∞... üéß`);

            queue.addTrack(res.tracks[query.content - 1]);

            if (!queue.playing) await queue.play();
        });

        collector.on('end', (msg, reason) => {
            if (reason === 'time') return inter.followUp({ content:`–í—Ä–µ–º—è –ø—Ä–µ–≤—ã—à–µ–Ω–æ ${inter.member}... –ø–æ–ø—Ä–æ–±—É–µ—à—å –µ—â–µ —Ä–∞–∑ ? ‚ùå`, ephemeral: true })
        });
    },
};